<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>스마트 가계부 - 영수증 OCR</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/4.1.1/tesseract.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.2em;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }

        .upload-section {
            background: #fff;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border: 2px dashed #3498db;
            transition: all 0.3s ease;
        }

        .upload-section:hover {
            border-color: #2980b9;
            transform: translateY(-2px);
        }

        .upload-area {
            text-align: center;
            padding: 40px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .upload-area:hover {
            background: rgba(52, 152, 219, 0.05);
        }

        .upload-icon {
            font-size: 4em;
            color: #3498db;
            margin-bottom: 20px;
        }

        .file-input {
            display: none;
        }

        .upload-btn {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
        }

        .upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }

        .camera-btn {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
        }

        .camera-btn:hover {
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.4);
        }

        .preview-section {
            background: #fff;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }

        .preview-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            margin-bottom: 20px;
        }

        .analysis-results {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }

        .expense-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: white;
            border-radius: 10px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .expense-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.15);
        }

        .expense-category {
            background: #3498db;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
        }

        .expense-amount {
            font-size: 1.2em;
            font-weight: bold;
            color: #e74c3c;
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 1.2em;
            color: #3498db;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 40px;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            text-align: center;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }

        .stat-value {
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .stat-label {
            color: #7f8c8d;
            font-size: 1.1em;
        }

        .chart-container {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-top: 30px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }

        .advice-section {
            background: linear-gradient(45deg, #2ecc71, #27ae60);
            color: white;
            border-radius: 15px;
            padding: 25px;
            margin-top: 30px;
            box-shadow: 0 10px 25px rgba(46, 204, 113, 0.3);
        }

        .advice-title {
            font-size: 1.5em;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .advice-list {
            list-style: none;
        }

        .advice-list li {
            padding: 8px 0;
            padding-left: 25px;
            position: relative;
        }

        .advice-list li:before {
            content: "💡";
            position: absolute;
            left: 0;
        }

        #video {
            width: 100%;
            max-width: 400px;
            border-radius: 10px;
            margin: 20px 0;
        }

        .category-food { background: #e74c3c; }
        .category-transport { background: #3498db; }
        .category-shopping { background: #9b59b6; }
        .category-utilities { background: #f39c12; }
        .category-healthcare { background: #1abc9c; }
        .category-entertainment { background: #e67e22; }
        .category-other { background: #95a5a6; }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .container {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>💰 스마트 가계부</h1>
            <p>영수증을 촬영하면 자동으로 분석하고 분류해드립니다</p>
        </div>

        <div class="main-content">
            <div class="upload-section">
                <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                    <div class="upload-icon">📸</div>
                    <h3>영수증을 업로드하세요</h3>
                    <p>이미지 파일을 선택하거나 드래그하여 업로드</p>
                    <input type="file" id="fileInput" class="file-input" accept="image/*">
                    <button class="upload-btn">파일 선택</button>
                    <button class="upload-btn camera-btn" onclick="startCamera()">카메라 촬영</button>
                </div>
                
                <video id="video" style="display: none;"></video>
                <canvas id="canvas" style="display: none;"></canvas>
                <button id="captureBtn" style="display: none;" class="upload-btn">📷 촬영하기</button>
            </div>

            <div class="preview-section">
                <h3>📋 분석 결과</h3>
                <div id="previewArea">
                    <p style="text-align: center; color: #7f8c8d; padding: 40px;">
                        영수증을 업로드하면 여기에 분석 결과가 표시됩니다
                    </p>
                </div>
            </div>
        </div>

        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-value" id="totalExpense">₩0</div>
                <div class="stat-label">총 지출</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="todayExpense">₩0</div>
                <div class="stat-label">오늘 지출</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="avgExpense">₩0</div>
                <div class="stat-label">평균 지출</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="expenseCount">0</div>
                <div class="stat-label">기록된 영수증</div>
            </div>
        </div>

        <div class="chart-container">
            <h3>📊 카테고리별 지출 분석</h3>
            <canvas id="expenseChart"></canvas>
        </div>

        <div class="history-section">
            <h3>📅 지출 내역</h3>
            <div class="history-controls">
                <input type="date" id="dateFilter" class="date-filter">
                <select id="categoryFilter" class="category-filter">
                    <option value="">전체 카테고리</option>
                    <option value="식비">식비</option>
                    <option value="교통비">교통비</option>
                    <option value="쇼핑">쇼핑</option>
                    <option value="공과금">공과금</option>
                    <option value="의료비">의료비</option>
                    <option value="여가">여가</option>
                    <option value="기타">기타</option>
                </select>
                <button class="filter-btn" onclick="applyFilters()">🔍 필터 적용</button>
                <button class="clear-btn" onclick="clearFilters()">🔄 전체 보기</button>
            </div>
            <div id="expenseHistory" class="expense-history"></div>
        </div>

        <div class="data-management">
            <h3>⚙️ 데이터 관리</h3>
            <div class="management-buttons">
                <button class="manage-btn export-btn" onclick="exportData()">💾 데이터 내보내기</button>
                <input type="file" id="importInput" accept=".json" style="display: none;" onchange="importData(event)">
                <button class="manage-btn import-btn" onclick="document.getElementById('importInput').click()">📂 데이터 가져오기</button>
                <button class="manage-btn delete-btn" onclick="clearAllData()">🗑️ 전체 삭제</button>
            </div>
        </div>

        <div class="advice-section">
            <div class="advice-title">
                <span>💡</span>
                <span>절약 조언</span>
            </div>
            <ul class="advice-list" id="adviceList">
                <li>영수증을 업로드하면 맞춤형 절약 조언을 제공해드립니다</li>
            </ul>
        </div>
    </div>

    <script>
        // 전역 변수
        let expenses = JSON.parse(localStorage.getItem('expenses')) || [];
        let chart = null;
        let stream = null;

        // 카테고리 분류 키워드
        const categoryKeywords = {
            '식비': ['마트', '식당', '카페', '커피', '음식', '치킨', '피자', '햄버거', '쌀', '과일', '야채', '육류', '베이커리', '제과', '음료'],
            '교통비': ['버스', '지하철', '택시', '기차', '항공', '주유', '기름', '톨게이트', '주차', '카드택시', 'KTX'],
            '쇼핑': ['의류', '신발', '가방', '화장품', '액세서리', '전자제품', '가전', '가구', '서적', '문구', '온라인'],
            '공과금': ['전기', '가스', '수도', '인터넷', '통신', '관리비', '보험', '은행', '카드'],
            '의료비': ['병원', '약국', '의료', '치과', '안과', '건강검진', '영양제', '의약품'],
            '여가': ['영화', '게임', '스포츠', '헬스', '미용', '놀이공원', '여행', '숙박', '관광'],
            '기타': []
        };

        // 초기화
        document.addEventListener('DOMContentLoaded', function() {
            updateStats();
            updateChart();
            setupEventListeners();
        });

        function setupEventListeners() {
            document.getElementById('fileInput').addEventListener('change', handleFileUpload);
            document.getElementById('captureBtn').addEventListener('click', capturePhoto);
            
            // 드래그 앤 드롭
            const uploadArea = document.querySelector('.upload-area');
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.style.backgroundColor = 'rgba(52, 152, 219, 0.1)';
            });
            
            uploadArea.addEventListener('dragleave', (e) => {
                e.preventDefault();
                uploadArea.style.backgroundColor = '';
            });
            
            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.style.backgroundColor = '';
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    processImage(files[0]);
                }
            });
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file) {
                processImage(file);
            }
        }

        function startCamera() {
            const video = document.getElementById('video');
            const captureBtn = document.getElementById('captureBtn');
            
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(function(mediaStream) {
                    stream = mediaStream;
                    video.srcObject = mediaStream;
                    video.style.display = 'block';
                    captureBtn.style.display = 'block';
                    video.play();
                })
                .catch(function(err) {
                    alert('카메라에 접근할 수 없습니다: ' + err.message);
                });
        }

        function capturePhoto() {
            const video = document.getElementById('video');
            const canvas = document.getElementById('canvas');
            const context = canvas.getContext('2d');
            
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0);
            
            // 스트림 종료
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
            video.style.display = 'none';
            document.getElementById('captureBtn').style.display = 'none';
            
            // 캔버스를 blob으로 변환
            canvas.toBlob(function(blob) {
                processImage(blob);
            });
        }

        function processImage(file) {
            const previewArea = document.getElementById('previewArea');
            
            // 로딩 표시
            previewArea.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <p>영수증을 분석하고 있습니다...</p>
                </div>
            `;

            // 이미지 미리보기
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = new Image();
                img.onload = function() {
                    // OCR 처리
                    performOCR(e.target.result);
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        function performOCR(imageSrc) {
            Tesseract.recognize(
                imageSrc,
                'kor+eng',
                {
                    logger: m => {
                        if (m.status === 'recognizing text') {
                            const progress = Math.round(m.progress * 100);
                            document.querySelector('.loading p').textContent = 
                                `영수증 분석 중... ${progress}%`;
                        }
                    }
                }
            ).then(({ data: { text } }) => {
                analyzeReceipt(text, imageSrc);
            }).catch(err => {
                console.error('OCR 오류:', err);
                showError('OCR 처리 중 오류가 발생했습니다.');
            });
        }

        function analyzeReceipt(text, imageSrc) {
            console.log('OCR 결과:', text);
            
            // 텍스트에서 금액과 상품명 추출
            const items = extractItemsFromText(text);
            const total = extractTotalAmount(text);
            const store = extractStoreName(text);
            const date = new Date();
            
            // 결과 표시
            displayAnalysisResults(items, total, store, imageSrc, date);
            
            // 데이터 저장
            if (items.length > 0 || total > 0) {
                const expense = {
                    id: Date.now(),
                    date: date.toISOString(),
                    store: store,
                    items: items,
                    total: total,
                    image: imageSrc
                };
                expenses.push(expense);
                localStorage.setItem('expenses', JSON.stringify(expenses));
                updateStats();
                updateChart();
                updateAdvice();
            }
        }

        function extractItemsFromText(text) {
            const items = [];
            const lines = text.split('\n');
            
            for (let line of lines) {
                // 금액 패턴 매칭 (숫자,숫자 형태)
                const priceMatch = line.match(/(\d{1,3}(?:,\d{3})*|\d+)/g);
                if (priceMatch) {
                    const prices = priceMatch.filter(p => parseInt(p.replace(/,/g, '')) > 100);
                    if (prices.length > 0) {
                        const price = parseInt(prices[prices.length - 1].replace(/,/g, ''));
                        const itemName = line.replace(/\d+.*$/g, '').trim() || '상품';
                        const category = categorizeItem(line);
                        
                        if (price > 0 && price < 1000000) { // 합리적인 금액 범위
                            items.push({
                                name: itemName,
                                price: price,
                                category: category
                            });
                        }
                    }
                }
            }
            
            // 중복 제거 및 정렬
            const uniqueItems = items.filter((item, index, self) => 
                index === self.findIndex(i => i.name === item.name && i.price === item.price)
            );
            
            return uniqueItems.slice(0, 10); // 최대 10개 항목
        }

        function extractTotalAmount(text) {
            // 총액, 합계 등의 키워드 찾기
            const totalPatterns = [
                /총[액계]\s*:?\s*(\d{1,3}(?:,\d{3})*)/,
                /합계\s*:?\s*(\d{1,3}(?:,\d{3})*)/,
                /total\s*:?\s*(\d{1,3}(?:,\d{3})*)/i,
                /결제.*?(\d{1,3}(?:,\d{3})*)/
            ];
            
            for (let pattern of totalPatterns) {
                const match = text.match(pattern);
                if (match) {
                    return parseInt(match[1].replace(/,/g, ''));
                }
            }
            
            // 가장 큰 금액을 총액으로 추정
            const allNumbers = text.match(/\d{1,3}(?:,\d{3})*/g);
            if (allNumbers) {
                const amounts = allNumbers.map(n => parseInt(n.replace(/,/g, '')))
                    .filter(n => n > 1000 && n < 1000000);
                return amounts.length > 0 ? Math.max(...amounts) : 0;
            }
            
            return 0;
        }

        function extractStoreName(text) {
            const lines = text.split('\n').filter(line => line.trim().length > 0);
            
            // 첫 번째 의미있는 라인을 상점명으로 추정
            for (let line of lines.slice(0, 5)) {
                const cleanLine = line.trim();
                if (cleanLine.length > 2 && cleanLine.length < 30 && 
                    !/\d/.test(cleanLine) && !/[:\-\*]/.test(cleanLine)) {
                    return cleanLine;
                }
            }
            
            return '알 수 없는 상점';
        }

        function categorizeItem(text) {
            const lowerText = text.toLowerCase();
            
            for (let [category, keywords] of Object.entries(categoryKeywords)) {
                if (category === '기타') continue;
                
                for (let keyword of keywords) {
                    if (lowerText.includes(keyword.toLowerCase())) {
                        return category;
                    }
                }
            }
            
            return '기타';
        }

        function displayAnalysisResults(items, total, store, imageSrc, date) {
            const previewArea = document.getElementById('previewArea');
            
            let itemsHtml = '';
            if (items.length > 0) {
                itemsHtml = items.map(item => `
                    <div class="expense-item">
                        <div>
                            <strong>${item.name}</strong>
                            <span class="expense-category category-${item.category.toLowerCase()}">${item.category}</span>
                        </div>
                        <div class="expense-amount">₩${item.price.toLocaleString()}</div>
                    </div>
                `).join('');
            }
            
            previewArea.innerHTML = `
                <img src="${imageSrc}" alt="영수증 미리보기" class="preview-image">
                <div class="analysis-results">
                    <h4>🏪 ${store}</h4>
                    <p>📅 ${date.toLocaleDateString('ko-KR')}</p>
                    <p><strong>💰 총 금액: ₩${total.toLocaleString()}</strong></p>
                    
                    ${items.length > 0 ? `
                        <h5 style="margin-top: 20px; margin-bottom: 10px;">📝 상세 항목</h5>
                        ${itemsHtml}
                    ` : ''}
                </div>
            `;
        }

        function updateStats() {
            const today = new Date().toDateString();
            const todayExpenses = expenses.filter(exp => 
                new Date(exp.date).toDateString() === today
            );
            
            const totalAmount = expenses.reduce((sum, exp) => sum + exp.total, 0);
            const todayAmount = todayExpenses.reduce((sum, exp) => sum + exp.total, 0);
            const avgAmount = expenses.length > 0 ? Math.round(totalAmount / expenses.length) : 0;
            
            document.getElementById('totalExpense').textContent = `₩${totalAmount.toLocaleString()}`;
            document.getElementById('todayExpense').textContent = `₩${todayAmount.toLocaleString()}`;
            document.getElementById('avgExpense').textContent = `₩${avgAmount.toLocaleString()}`;
            document.getElementById('expenseCount').textContent = expenses.length.toString();
        }

        function updateChart() {
            const ctx = document.getElementById('expenseChart').getContext('2d');
            
            // 카테고리별 집계
            const categoryTotals = {};
            expenses.forEach(expense => {
                expense.items.forEach(item => {
                    categoryTotals[item.category] = (categoryTotals[item.category] || 0) + item.price;
                });
            });
            
            const labels = Object.keys(categoryTotals);
            const data = Object.values(categoryTotals);
            const colors = [
                '#e74c3c', '#3498db', '#9b59b6', '#f39c12', 
                '#1abc9c', '#e67e22', '#95a5a6'
            ];
            
            if (chart) {
                chart.destroy();
            }
            
            chart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: colors.slice(0, labels.length),
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                font: {
                                    size: 14
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateAdvice() {
            const adviceList = document.getElementById('adviceList');
            const advice = generateAdvice();
            
            adviceList.innerHTML = advice.map(tip => `<li>${tip}</li>`).join('');
        }

        function generateAdvice() {
            if (expenses.length === 0) {
                return ['영수증을 업로드하면 맞춤형 절약 조언을 제공해드립니다'];
            }
            
            const advice = [];
            const categoryTotals = {};
            const totalAmount = expenses.reduce((sum, exp) => sum + exp.total, 0);
            
            // 카테고리별 집계
            expenses.forEach(expense => {
                expense.items.forEach(item => {
                    categoryTotals[item.category] = (categoryTotals[item.category] || 0) + item.price;
                });
            });
            
            // 가장 큰 지출 카테고리
            const maxCategory = Object.keys(categoryTotals).reduce((a, b) => 
                categoryTotals[a] > categoryTotals[b] ? a : b, Object.keys(categoryTotals)[0]
            );
            
            if (maxCategory) {
                const percentage = Math.round((categoryTotals[maxCategory] / totalAmount) * 100);
                advice.push(`${maxCategory} 지출이 전체의 ${percentage}%를 차지합니다. 이 부분에서 절약을 고려해보세요.`);
            }
            
            // 일평균 지출
            const avgDaily = Math.round(totalAmount / Math.max(expenses.length, 1));
            if (avgDaily > 50000) {
                advice.push(`일평균 지출이 ₩${avgDaily.toLocaleString()}입니다. 하루 예산을 정해보는 것을 추천합니다.`);
            }
            
            // 식비 관련 조언
            if (categoryTotals['식비'] > totalAmount * 0.4) {
                advice.push('식비 비중이 높습니다. 홈쿡킹이나 도시락 준비로 외식비를 줄여보세요.');
            }
            
            // 일반적인 절약 팁
            const generalTips = [
                '영수증을 모아서 월별 지출 패턴을 파악해보세요.',
                '할인 혜택이나 적립금을 적극 활용해보세요.',
                '충동구매를 줄이기 위해 구매 전 하루 정도 생각해보는 시간을 가져보세요.'
            ];
            
            advice.push(generalTips[Math.floor(Math.random() * generalTips.length)]);
            
            return advice;
        }

        function showError(message) {
            const previewArea = document.getElementById('previewArea');
            previewArea.innerHTML = `
                <div style="text-align: center; color: #e74c3c; padding: 40px;">
                    <h3>⚠️ 오류 발생</h3>
                    <p>${message}</p>
                    <button class="upload-btn" onclick="location.reload()">다시 시도</button>
                </div>
            `;
        }

        // 데이터 내보내기/가져오기 기능
        function exportData() {
            const dataStr = JSON.stringify(expenses, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            
            const exportFileDefaultName = `가계부_${new Date().toISOString().split('T')[0]}.json`;
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
        }

        function importData(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    if (Array.isArray(importedData)) {
                        expenses = importedData;
                        localStorage.setItem('expenses', JSON.stringify(expenses));
                        updateStats();
                        updateChart();
                        updateAdvice();
                        alert('데이터를 성공적으로 가져왔습니다!');
                    } else {
                        alert('올바르지 않은 파일 형식입니다.');
                    }
                } catch (error) {
                    alert('파일을 읽는 중 오류가 발생했습니다.');
                }
            };
            reader.readAsText(file);
        }

        // 데이터 삭제 기능
        function clearAllData() {
            if (confirm('모든 데이터를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
                expenses = [];
                localStorage.removeItem('expenses');
                updateStats();
                updateChart();
                updateAdvice();
                document.getElementById('previewArea').innerHTML = `
                    <p style="text-align: center; color: #7f8c8d; padding: 40px;">
                        영수증을 업로드하면 여기에 분석 결과가 표시됩니다
                    </p>
                `;
                alert('모든 데이터가 삭제되었습니다.');
            }
        }

        // 개선된 OCR 전처리
        function preprocessImage(canvas) {
            const ctx = canvas.getContext('2d');
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            // 그레이스케일 변환 및 대비 증가
            for (let i = 0; i < data.length; i += 4) {
                const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;
                const enhanced = gray > 128 ? 255 : 0; // 이진화
                
                data[i] = enhanced;     // R
                data[i + 1] = enhanced; // G
                data[i + 2] = enhanced; // B
            }
            
            ctx.putImageData(imageData, 0, 0);
            return canvas.toDataURL();
        }

        // 향상된 텍스트 분석
        function smartTextAnalysis(text) {
            // 한글 OCR 결과 정리
            const cleanText = text
                .replace(/[^\w\s가-힣,.-]/g, ' ')
                .replace(/\s+/g, ' ')
                .trim();
            
            return cleanText;
        }

        // 실시간 분석 결과 업데이트
        function liveAnalysis() {
            if (expenses.length > 0) {
                const recentExpenses = expenses.slice(-30); // 최근 30개
                const monthlySpending = calculateMonthlyTrend(recentExpenses);
                displayTrendAnalysis(monthlySpending);
            }
        }

        function calculateMonthlyTrend(expenseData) {
            const monthly = {};
            expenseData.forEach(expense => {
                const month = new Date(expense.date).toISOString().substr(0, 7);
                monthly[month] = (monthly[month] || 0) + expense.total;
            });
            return monthly;
        }

        function displayTrendAnalysis(monthlyData) {
            const months = Object.keys(monthlyData).sort();
            if (months.length > 1) {
                const lastMonth = monthlyData[months[months.length - 1]];
                const prevMonth = monthlyData[months[months.length - 2]];
                const change = ((lastMonth - prevMonth) / prevMonth * 100).toFixed(1);
                
                const trendElement = document.createElement('div');
                trendElement.className = 'trend-analysis';
                trendElement.innerHTML = `
                    <h4>📈 지출 트렌드</h4>
                    <p>전월 대비 ${change > 0 ? '+' : ''}${change}% ${change > 0 ? '증가' : '감소'}</p>
                `;
                
                // 기존 트렌드 분석 제거 후 추가
                const existing = document.querySelector('.trend-analysis');
                if (existing) existing.remove();
                
                document.querySelector('.stats-section').appendChild(trendElement);
            }
        }

        // 페이지 로드 시 실행
        window.addEventListener('load', function() {
            liveAnalysis();
            
            // 주기적으로 분석 업데이트
            setInterval(liveAnalysis, 30000); // 30초마다
        });

        // 키보드 단축키
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'u':
                        e.preventDefault();
                        document.getElementById('fileInput').click();
                        break;
                    case 's':
                        e.preventDefault();
                        exportData();
                        break;
                    case 'Delete':
                        e.preventDefault();
                        clearAllData();
                        break;
                }
            }
        });

        // 터치 제스처 지원 (모바일)
        let touchStartY = 0;
        document.addEventListener('touchstart', function(e) {
            touchStartY = e.touches[0].clientY;
        });

        document.addEventListener('touchend', function(e) {
            const touchEndY = e.changedTouches[0].clientY;
            const diff = touchStartY - touchEndY;
            
            // 위로 스와이프 시 카메라 실행
            if (diff > 50) {
                startCamera();
            }
        });

        // 자동 저장 기능
        setInterval(function() {
            if (expenses.length > 0) {
                localStorage.setItem('expenses', JSON.stringify(expenses));
                localStorage.setItem('lastSaved', new Date().toISOString());
            }
        }, 10000); // 10초마다 자동 저장

        // 오프라인 지원
        window.addEventListener('online', function() {
            console.log('온라인 상태로 변경되었습니다.');
        });

        window.addEventListener('offline', function() {
            console.log('오프라인 상태입니다. 데이터는 로컬에 저장됩니다.');
        });
    </script>
</body>
</html>
